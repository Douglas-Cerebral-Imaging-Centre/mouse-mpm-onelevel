#!/bin/bash
#
# ARG_OPTIONAL_SINGLE([qi_output_dir],[d],[hMRI output directory, at the level where all subjects are present],[../derivatives/qi/outputs/])
# ARG_OPTIONAL_SINGLE([registration_output_dir],[o],[Directory where the registered qmri maps are copied],[../derivatives/qi/outputs_to_commonspace/])

# ARG_HELP([Use commonspace_resample.sh to register qi MPM maps to common space])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='doh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_qi_output_dir="../derivatives/qi/outputs/"
_arg_registration_output_dir="../derivatives/qi/outputs_to_commonspace/"


print_help()
{
	printf '%s\n' "Use commonspace_resample.sh to register qi MPM maps to common space"
	printf 'Usage: %s [-d|--qi_output_dir <arg>] [-o|--registration_output_dir <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-d, --qi_output_dir: hMRI output directory, at the level where all subjects are present (default: '../derivatives/qi/outputs/')"
	printf '\t%s\n' "-o, --registration_output_dir: Directory where the registered qmri maps are copied (default: '../derivatives/qi/outputs_to_commonspace/')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-d|--qi_output_dir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_qi_output_dir="$2"
				shift
				;;
			--qi_output_dir=*)
				_arg_qi_output_dir="${_key##--qi_output_dir=}"
				;;
			-d*)
				_arg_qi_output_dir="${_key##-d}"
				;;
			-o|--registration_output_dir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_registration_output_dir="$2"
				shift
				;;
			--registration_output_dir=*)
				_arg_registration_output_dir="${_key##--registration_output_dir=}"
				;;
			-o*)
				_arg_registration_output_dir="${_key##-o}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# Set bash strict mode
set -euo pipefail
IFS=$'\n\t'


# Add modelbuild.sh to path
modelbuild_path=/data/foujer/programs/optimized_antsMultivariateTemplateConstruction
if [ -d "$modelbuild_path" ] && [[ ":$PATH:" != *":$modelbuild_path:"* ]]
then
  export PATH="${PATH:+"$PATH:"}$modelbuild_path"
fi

# trim trailing slashes
_arg_qi_output_dir=$(echo "$_arg_qi_output_dir" | sed 's:/*$::')
# Define common path
modelbuild_outputdir=../derivatives/registration/modelbuild/

# Register all mtsat results
file_to_register=("PD" "PD_rb1corr" "R1" "delta")
for i_file_to_register in ${file_to_register[@]}
  do
  # Create input file
  input_file=${_arg_qi_output_dir}/mtsat/${i_file_to_register}.txt
  registration/create_modelbuild_inputfile.sh \
    ../derivatives/registration/modelbuild/inputs_template.txt \
    -p ${_arg_qi_output_dir}/mtsat/ \
    -s _MTSat_${i_file_to_register}.nii.gz \
    -o ${input_file}


  # Run commonspace_resample
  commonspace_resample.sh ${modelbuild_outputdir}inputs.txt \
    --output-dir ${modelbuild_outputdir} \
    --resample-inputs ${input_file}
done

# Register R2* results
# Create input file
input_file=${_arg_qi_output_dir}/r2s_mpm/R2s.txt
registration/create_modelbuild_inputfile.sh \
    ../derivatives/registration/modelbuild/inputs_template.txt \
    -p ${_arg_qi_output_dir}/r2s_mpm/ \
    -s _MPM_R2s.nii.gz \
    -o ${input_file}

# Run commonspace_resample
commonspace_resample.sh ${modelbuild_outputdir}inputs.txt \
  --output-dir ${modelbuild_outputdir} \
  --resample-inputs ${input_file}

# Register MTR results
# Create input file
input_file=${_arg_qi_output_dir}/mtr/mtr.txt
registration/create_modelbuild_inputfile.sh \
    ../derivatives/registration/modelbuild/inputs_template.txt \
    -p ${_arg_qi_output_dir}/mtr/ \
    -s _MTR.nii.gz \
    -o ${input_file}

# Run commonspace_resample
commonspace_resample.sh ${modelbuild_outputdir}inputs.txt \
  --output-dir ${modelbuild_outputdir} \
  --resample-inputs ${input_file}

# Upon completetion, rsync registered maps to destination folder and clean up
mkdir -p ${_arg_registration_output_dir}
export QBATCH_SCRIPT_FOLDER="${_arg_registration_output_dir}/.qbatch/"
qbatch --depend commonspace_resample* --logdir ${_arg_registration_output_dir}/log -- \
  rsync -avz --delete --remove-source-files \
    ../derivatives/registration/modelbuild/commonspace-resampled/ \
    ${_arg_registration_output_dir}

# ] <-- needed because of Argbash
