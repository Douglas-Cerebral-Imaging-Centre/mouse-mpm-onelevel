#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([output_prefix],[Output file name prefix (.nii.gz is added)])
# ARG_POSITIONAL_INF([inputs],[Input images to be RMS-combined (nifti files)],[2])

# ARG_HELP([Compute the Root-Mean-Square (RMS) combination of input images. Based on FSL.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_inputs=('' '' )
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "Compute the Root-Mean-Square (RMS) combination of input images. Based on FSL."
	printf 'Usage: %s [-h|--help] <output_prefix> <inputs-1> <inputs-2> [<inputs-3>] ... [<inputs-n>] ...\n' "$0"
	printf '\t%s\n' "<output_prefix>: Output file name prefix (.nii.gz is added)"
	printf '\t%s\n' "<inputs>: Input images to be RMS-combined (nifti files)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'output_prefix' and 'inputs' (2 times)"
	test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_output_prefix _arg_inputs[0] _arg_inputs[1] "
	_our_args=$((${#_positionals[@]} - 3))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_inputs[$((ii + 2))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash



#!/bin/bash
set -euo pipefail
IFS=$'\n\t'
outputPrefix=$1
shift

tmp_merged_inputs=$(mktemp --tmpdir XXXX.nii.gz)
fslmerge -t ${tmp_merged_inputs} ${_arg_inputs[@]}
fslmaths ${tmp_merged_inputs} -sqr -Tmean -sqrt "$outputPrefix.nii.gz"
rm ${tmp_merged_inputs}

# ] <-- needed because of Argbash
